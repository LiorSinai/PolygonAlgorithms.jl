using PolygonAlgorithms: rotate

@testset "intersect-Hilbert" begin

function are_regions_equal(r1::Vector{Vector{T}}, r2::Vector{Vector{T}}) where T
    if length(r1) != length(r2)
        return false
    end
    r1_sets = [PointSet(r, digits=6) for r in r1]
    r2_sets = [PointSet(r, digits=6) for r in r2]
    issetequal(r1_sets, r2_sets)
end

function hilbert_curve(
    point::Tuple{T, T},
    horiz::Tuple{T, T},
    vert::Tuple{T, T},
    level::Int
    ) where T <: AbstractFloat
    # Algorithm from http://www.fundza.com/algorithmic/space_filling/hilbert/basics/
    if level <= 0
        next = ((point[1] + (horiz[1] + vert[1])/2), (point[2] + (horiz[2] + vert[2])/2))
        return [next]
    end
    points = [
        hilbert_curve(point, (horiz[2]/2, vert[2]/2), (horiz[1]/2, vert[1]/2), level-1)...,
        hilbert_curve((point[1] + horiz[1]/2, point[2] + horiz[2]/2), (horiz[1]/2, horiz[2]/2), (vert[1]/2, vert[2]/2), level-1)...,
        hilbert_curve((point[1] + horiz[1]/2+vert[1]/2, point[2] + horiz[2]/2+vert[2]/2), (horiz[1]/2, horiz[2]/2), (vert[1]/2, vert[2]/2), level-1)...,
        hilbert_curve((point[1] + horiz[1]/2+vert[1], point[2] + horiz[2]/2+vert[2]), (-vert[1]/2, -vert[2]/2), (-horiz[1]/2, -horiz[2]/2), level-1)...
    ]
    points
end

@testset "Hilbert curve order 4" begin 
    order = 4
    points = hilbert_curve((0.0, 0.0), (1.0, 0.0), (0.0, 1.0), order);
    x_max = maximum(p->p[1], points)
    tail = points[end]
    head = points[1]
    ## fill inner
    push!(points, (-tail[1], tail[2]))
    push!(points, (-head[1], head[2]))

    poly1 = reverse(points);
    poly2 = PolygonAlgorithms.rotate(poly1, Ï€/2.0, (0.5, 0.5))

    expected = [
        [(0.09375, 0.03125), (0.09375, 0.09375), (0.03125, 0.09375), (0.03125, 0.15625), (0.03125, 0.21875), (0.03125, 0.15625), (0.09375, 0.15625), (0.09375, 0.21875), (0.09375, 0.15625), (0.15625, 0.15625), (0.15625, 0.21875), (0.21875, 0.21875), (0.21875, 0.15625), (0.15625, 0.15625), (0.15625, 0.09375), (0.21875, 0.09375), (0.15625, 0.09375), (0.15625, 0.03125), (0.21875, 0.03125), (0.15625, 0.03125), (0.09375, 0.03125)],
        [(0.28125, 0.03125), (0.28125, 0.09375), (0.34375, 0.09375), (0.34375, 0.03125), (0.40625, 0.03125), (0.34375, 0.03125)],
        [(0.46875, 0.03125), (0.46875, 0.09375), (0.40625, 0.09375), (0.40625, 0.15625), (0.46875, 0.15625), (0.46875, 0.21875), (0.46875, 0.28125), (0.40625, 0.28125), (0.46875, 0.28125), (0.46875, 0.34375), (0.40625, 0.34375), (0.46875, 0.34375), (0.46875, 0.40625), (0.46875, 0.46875), (0.40625, 0.46875), (0.34375, 0.46875), (0.34375, 0.40625), (0.34375, 0.46875), (0.28125, 0.46875), (0.28125, 0.40625), (0.28125, 0.46875), (0.21875, 0.46875), (0.15625, 0.46875), (0.15625, 0.40625), (0.09375, 0.40625), (0.09375, 0.46875), (0.03125, 0.46875), (0.03125, 0.53125), (0.03125, 0.59375), (0.03125, 0.53125), (0.09375, 0.53125), (0.09375, 0.59375), (0.09375, 0.53125), (0.15625, 0.53125), (0.21875, 0.53125), (0.21875, 0.59375), (0.21875, 0.65625), (0.15625, 0.65625), (0.21875, 0.65625), (0.21875, 0.71875), (0.15625, 0.71875), (0.21875, 0.71875), (0.28125, 0.71875), (0.34375, 0.71875), (0.28125, 0.71875), (0.28125, 0.65625), (0.34375, 0.65625), (0.28125, 0.65625), (0.28125, 0.59375), (0.28125, 0.53125), (0.34375, 0.53125), (0.40625, 0.53125), (0.40625, 0.59375), (0.40625, 0.53125), (0.46875, 0.53125), (0.46875, 0.59375), (0.46875, 0.53125), (0.53125, 0.53125), (0.53125, 0.59375), (0.59375, 0.59375), (0.59375, 0.53125), (0.53125, 0.53125), (0.53125, 0.46875), (0.59375, 0.46875), (0.53125, 0.46875), (0.53125, 0.40625), (0.59375, 0.40625), (0.53125, 0.40625), (0.53125, 0.34375), (0.53125, 0.28125), (0.59375, 0.28125), (0.65625, 0.28125), (0.65625, 0.34375), (0.65625, 0.28125), (0.71875, 0.28125), (0.71875, 0.34375), (0.71875, 0.28125), (0.71875, 0.21875), (0.71875, 0.15625), (0.71875, 0.21875), (0.65625, 0.21875), (0.65625, 0.15625), (0.65625, 0.21875), (0.59375, 0.21875), (0.53125, 0.21875), (0.53125, 0.15625), (0.53125, 0.09375), (0.59375, 0.09375), (0.53125, 0.09375), (0.53125, 0.03125), (0.59375, 0.03125), (0.53125, 0.03125)],
        [(0.40625, 0.21875), (0.34375, 0.21875), (0.34375, 0.15625), (0.28125, 0.15625), (0.28125, 0.21875), (0.34375, 0.21875)],
        [(0.28125, 0.28125), (0.28125, 0.34375), (0.34375, 0.34375), (0.34375, 0.28125)],
        [(0.21875, 0.40625), (0.21875, 0.34375), (0.21875, 0.28125), (0.15625, 0.28125), (0.15625, 0.34375), (0.21875, 0.34375)],
        [(0.09375, 0.34375), (0.09375, 0.28125), (0.03125, 0.28125), (0.03125, 0.34375), (0.03125, 0.40625), (0.03125, 0.34375)],
        [(0.09375, 0.71875), (0.09375, 0.65625), (0.03125, 0.65625), (0.03125, 0.71875), (0.03125, 0.78125), (0.03125, 0.71875)],
        [(0.09375, 0.78125), (0.09375, 0.84375), (0.03125, 0.84375), (0.03125, 0.90625), (0.03125, 0.96875), (0.03125, 0.90625), (0.09375, 0.90625), (0.09375, 0.96875), (0.09375, 0.90625), (0.15625, 0.90625), (0.15625, 0.96875), (0.21875, 0.96875), (0.21875, 0.90625), (0.15625, 0.90625), (0.15625, 0.84375), (0.21875, 0.84375), (0.15625, 0.84375), (0.15625, 0.78125), (0.21875, 0.78125), (0.15625, 0.78125)],
        [(0.28125, 0.78125), (0.34375, 0.78125), (0.34375, 0.84375), (0.28125, 0.84375), (0.34375, 0.84375), (0.34375, 0.90625), (0.28125, 0.90625), (0.28125, 0.96875), (0.34375, 0.96875), (0.34375, 0.90625), (0.40625, 0.90625), (0.40625, 0.96875), (0.40625, 0.90625), (0.46875, 0.90625), (0.46875, 0.96875), (0.46875, 0.90625), (0.46875, 0.84375), (0.40625, 0.84375), (0.40625, 0.78125), (0.34375, 0.78125)],
        [(0.46875, 0.78125), (0.46875, 0.71875), (0.46875, 0.65625), (0.40625, 0.65625), (0.40625, 0.71875), (0.46875, 0.71875)],
        [(0.65625, 0.53125), (0.71875, 0.53125), (0.71875, 0.59375), (0.65625, 0.59375), (0.71875, 0.59375), (0.71875, 0.65625), (0.71875, 0.71875), (0.65625, 0.71875), (0.59375, 0.71875), (0.59375, 0.65625), (0.59375, 0.71875), (0.53125, 0.71875), (0.53125, 0.65625), (0.53125, 0.71875), (0.53125, 0.78125), (0.59375, 0.78125), (0.59375, 0.84375), (0.65625, 0.84375), (0.65625, 0.78125), (0.71875, 0.78125), (0.78125, 0.78125), (0.78125, 0.71875), (0.78125, 0.65625), (0.84375, 0.65625), (0.84375, 0.59375), (0.78125, 0.59375), (0.78125, 0.53125), (0.71875, 0.53125)],
        [(0.53125, 0.84375), (0.53125, 0.90625), (0.53125, 0.96875), (0.59375, 0.96875), (0.59375, 0.90625), (0.53125, 0.90625)],
        [(0.65625, 0.90625), (0.65625, 0.96875), (0.71875, 0.96875), (0.71875, 0.90625), (0.71875, 0.84375), (0.71875, 0.90625)],
        [(0.84375, 0.78125), (0.84375, 0.84375), (0.78125, 0.84375), (0.78125, 0.90625), (0.78125, 0.96875), (0.78125, 0.90625), (0.84375, 0.90625), (0.84375, 0.96875), (0.84375, 0.90625), (0.90625, 0.90625), (0.90625, 0.96875), (0.96875, 0.96875), (0.96875, 0.90625), (0.90625, 0.90625), (0.90625, 0.84375), (0.96875, 0.84375), (0.90625, 0.84375), (0.90625, 0.78125), (0.96875, 0.78125), (0.90625, 0.78125)],
        [(0.96875, 0.71875), (0.96875, 0.65625), (0.90625, 0.65625), (0.90625, 0.71875), (0.84375, 0.71875), (0.90625, 0.71875)],
        [(0.84375, 0.53125), (0.90625, 0.53125), (0.90625, 0.59375), (0.96875, 0.59375), (0.96875, 0.53125), (0.90625, 0.53125)],
        [(0.96875, 0.46875), (0.90625, 0.46875), (0.90625, 0.40625), (0.96875, 0.40625), (0.90625, 0.40625), (0.90625, 0.34375), (0.96875, 0.34375), (0.96875, 0.28125), (0.90625, 0.28125), (0.90625, 0.34375), (0.84375, 0.34375), (0.84375, 0.28125), (0.84375, 0.34375), (0.78125, 0.34375), (0.78125, 0.28125), (0.78125, 0.34375), (0.78125, 0.40625), (0.84375, 0.40625), (0.84375, 0.46875), (0.90625, 0.46875)],
        [(0.78125, 0.46875), (0.71875, 0.46875), (0.71875, 0.40625), (0.65625, 0.40625), (0.65625, 0.46875), (0.71875, 0.46875)],
        [(0.65625, 0.03125), (0.65625, 0.09375), (0.71875, 0.09375), (0.71875, 0.03125), (0.78125, 0.03125), (0.71875, 0.03125)],
        [(0.84375, 0.03125), (0.84375, 0.09375), (0.78125, 0.09375), (0.78125, 0.15625), (0.78125, 0.21875), (0.78125, 0.15625), (0.84375, 0.15625), (0.84375, 0.21875), (0.84375, 0.15625), (0.90625, 0.15625), (0.90625, 0.21875), (0.96875, 0.21875), (0.96875, 0.15625), (0.90625, 0.15625), (0.90625, 0.09375), (0.96875, 0.09375), (0.90625, 0.09375), (0.90625, 0.03125), (0.96875, 0.03125), (0.90625, 0.03125)],
        [(0.03125, 0.03125)],
        [(0.40625, 0.40625)],
        [(0.15625, 0.59375)],
        [(0.34375, 0.59375)],
        [(0.65625, 0.65625)],
        [(0.59375, 0.34375)],
        [(0.59375, 0.15625)],
    ]
    regions = intersect_geometry(poly1, poly2)
    @test are_regions_equal(regions, expected)
    regions = intersect_geometry(poly2, poly1)
    @test are_regions_equal(regions, expected)
end

end